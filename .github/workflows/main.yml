name: Daily Market Report with BOE Bank Rate
on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '30 12 * * *'  # 7:30 AM EST (12:30 UTC)

jobs:
  market_report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          pip install selenium webdriver-manager pandas yfinance

      - name: Scrape BOE Bank Rate
        id: scrape
        run: |
          python -c "
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.chrome.service import Service
          from webdriver_manager.chrome import ChromeDriverManager
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          import time
          import os

          # Configure Chrome
          chrome_options = Options()
          chrome_options.add_argument('--headless')
          chrome_options.add_argument('--no-sandbox')
          chrome_options.add_argument('--disable-dev-shm-usage')
          chrome_options.add_argument('--window-size=1920,1080')

          # Initialize driver
          driver = webdriver.Chrome(
              service=Service(ChromeDriverManager().install()),
              options=chrome_options
          )

          try:
              # Access BOE homepage
              driver.get('https://www.bankofengland.co.uk')
              time.sleep(3)  # Initial load

              # Wait for Bank Rate component
              rate_box = WebDriverWait(driver, 15).until(
                  EC.presence_of_element_located((By.CSS_SELECTOR, 'div.bank-rate'))
              
              # Extract the rate value
              current_rate = WebDriverWait(rate_box, 10).until(
                  EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.bank-rate__rate'))
              ).text.strip()

              # Extract decision date if available
              decision_date = driver.find_element(By.CSS_SELECTOR, 'div.bank-rate__date').text.strip()

              # Verification screenshot
              os.makedirs('screenshots', exist_ok=True)
              rate_box.screenshot('screenshots/boe_rate_verification.png')

              print(f'BOE Bank Rate: {current_rate}')
              print(f'Decision Date: {decision_date}')
              print(f'::set-output name=bank_rate::{current_rate}')
              print(f'::set-output name=decision_date::{decision_date}')

          except Exception as e:
              print(f'Scraping failed: {str(e)}')
              print(f'::set-output name=bank_rate::SCRAPE_FAILED')
          finally:
              driver.quit()
          "

      - name: Run Market Report
        run: |
          python market_report1.py \
            --boe-rate "${{ steps.scrape.outputs.bank_rate }}" \
            --decision-date "${{ steps.scrape.outputs.decision_date }}"

      - name: Upload Verification Assets
        uses: actions/upload-artifact@v3
        with:
          name: boe-rate-verification
          path: |
            screenshots/boe_rate_verification.png
